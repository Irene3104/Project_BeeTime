generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String?
  name              String?
  role              String             @default("EMPLOYEE")
  isProfileComplete Boolean            @default(false)
  locationId        Int?
  createdAt         DateTime           @default(now()) @db.Timestamp(6)
  updatedAt         DateTime           @updatedAt @db.Timestamp(6)
  title             String             @default("Staff")
  locationUsers     LocationUser[]
  refreshTokens     RefreshToken[]
  reports           Report[]
  timeRecords       TimeRecord[]
  location          Location?          @relation(fields: [locationId], references: [id])
  verificationCodes VerificationCode[]

  @@index([locationId])
}

model Location {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  branch        String?        @db.VarChar(100)
  company       String?        @db.VarChar(255)
  address       String
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @updatedAt @db.Timestamp(6)
  placeId       String         @unique
  abn           String?
  locationUsers LocationUser[]
  reports       Report[]
  timeRecords   TimeRecord[]
  users         User[]
}

model LocationUser {
  id         Int       @id @default(autoincrement())
  userId     String
  locationId Int
  startDate  DateTime  @default(now()) @db.Timestamp(6)
  endDate    DateTime? @db.Timestamp(6)
  location   Location  @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, locationId, startDate])
}

model TimeRecord {
  id            Int       @id @default(autoincrement())
  userId        String
  locationId    Int
  
  // 날짜 (시드니 기준, DD-MM-YYYY 형식)
  date          String    @db.VarChar(10)
  
  // 시간 정보 (HH:MM 형식)
  clockInTime   String    @db.VarChar(5)
  clockOutTime  String?   @db.VarChar(5)
  breakStartTime String?  @db.VarChar(5)
  breakEndTime  String?   @db.VarChar(5)
  
  // 계산된 시간 정보
  breakMinutes  Int       @default(0)  // 휴식 시간(분)
  workingHours  Float     @default(0)  // 실제 근무 시간(시간 단위, 소수점 포함)
  
  status        String    @db.VarChar(50)
  note          String?   @db.Text
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  
  // 관계 설정
  user          User      @relation(fields: [userId], references: [id])
  location      Location  @relation(fields: [locationId], references: [id])

  @@index([date])
  @@unique([userId, date])
}

model Report {
  id         Int       @id @default(autoincrement())
  title      String
  startDate  DateTime
  endDate    DateTime
  fileName   String
  fileData   Bytes
  locationId Int?
  creatorId  String
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt @db.Timestamp(6)
  creator    User      @relation(fields: [creatorId], references: [id])
  location   Location? @relation(fields: [locationId], references: [id])

  @@index([startDate, endDate])
  @@index([locationId])
  @@index([creatorId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String   @db.VarChar(6)
  expiresAt DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([expiresAt])
}
