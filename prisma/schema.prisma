// schema.prisma

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// 사용자 권한 구분 
model User {
  id           Int       @id @default(autoincrement())
  name         String    // 사용자 이름
  email        String    @unique  // 이메일 (로그인 아이디)
  passwordHash String    // 암호화된 비밀번호
  role         String    @default("EMPLOYEE")  // 사용자 권한 (ADMIN 또는 EMPLOYEE)
  createdAt    DateTime  @default(now())     // 계정 생성일
  updatedAt    DateTime  @updatedAt          // 정보 수정일

  // 관계 설정
  timeRecords  TimeRecord[]     // 근무 기록들
  locations    LocationUser[]   // 소속된 지점들

  @@index([email])  // 이메일 검색 성능 향상을 위한 인덱스
}

// 가게 정보
model Location {
  id        Int       @id @default(autoincrement())
  name      String    // 일하는 가게 이름
  branch    String?   // 지점명 (선택사항)
  address   String    // 주소
  company   String    // 회사명 (ex. JUNCAFEOPERA)
  isActive  Boolean   @default(true)      
  createdAt DateTime  @default(now())     
  updatedAt DateTime  @updatedAt          

  // 관계 설정
  users       LocationUser[]   
  timeRecords TimeRecord[]    
}

// 사용자-가게 연결 (다대다 관계)
// 한 직원이 여러 가게에서 근무할 수 있고, 한 지점에 여러 직원이 있을 수 있음
model LocationUser {
  id         Int      @id @default(autoincrement())
  userId     Int                          // 사용자 ID
  locationId Int                          // 가게 ID
  startDate  DateTime @default(now())     // 가게 배치(근무) 시작일
  endDate    DateTime?                    // 가게 배치(근무) 종료일 (null이면 현재 진행중)

  // 관계 설정
  user     User     @relation(fields: [userId], references: [id])
  location Location @relation(fields: [locationId], references: [id])

  @@unique([userId, locationId, startDate])  // 동일 기간에 중복 배치 방지
}

// 근무 기록
model TimeRecord {
  id         Int       @id @default(autoincrement())
  userId     Int                          // 사용자 ID 
  locationId Int                          // 가게 ID
  date       DateTime                     // 근무 날짜
  clockIn    DateTime                     // 출근 시간             
  clockOut   DateTime?                    // 퇴근 시간             
  status     String    @default("active") 
  note       String?   // 특이사항 메모
  createdAt  DateTime  @default(now())    
  updatedAt  DateTime  @updatedAt         

  // 관계 설정
  user         User          @relation(fields: [userId], references: [id])
  location     Location      @relation(fields: [locationId], references: [id])
  breaks       BreakRecord[]       

  @@unique([userId, date])   
  @@index([date])           
}

// 휴식 기록
model BreakRecord {
  id           Int       @id @default(autoincrement())
  timeRecordId Int                        
  startTime    DateTime                   // 휴식 시작 시간
  endTime      DateTime?                  // 휴식 종료 시간
  type         String    @default("lunch") 
  createdAt    DateTime  @default(now())   
  updatedAt    DateTime  @updatedAt        

  // 관계 설정
  timeRecord   TimeRecord @relation(fields: [timeRecordId], references: [id])

  @@index([timeRecordId])   
}

// 일일 근무 통계
// 실시간 통계 계산 부하를 줄이기 위한 집계 테이블
model WorkSummary {
  id           Int      @id @default(autoincrement())
  userId       Int                    
  locationId   Int                    
  date         DateTime // 근무 날짜
  totalMinutes Int                    
  breakMinutes Int                    
  status       String                 
  createdAt    DateTime
}
