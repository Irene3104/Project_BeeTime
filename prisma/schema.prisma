generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  email             String         @unique
  password          String?
  name              String?
  role              String         @default("EMPLOYEE")
  isProfileComplete Boolean        @default(false)
  locationId        Int?
  createdAt         DateTime       @default(now()) @db.Timestamp(6)
  updatedAt         DateTime       @updatedAt @db.Timestamp(6)
  locationUsers     LocationUser[]
  timeRecords       TimeRecord[]
  location          Location?      @relation(fields: [locationId], references: [id])

  @@index([locationId])
}

model Location {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  branch        String?        @db.VarChar(100)
  company       String         @db.VarChar(255)
  address       String
  placeId       String         @unique
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @updatedAt @db.Timestamp(6)
  locationUsers LocationUser[]
  timeRecords   TimeRecord[]
  users         User[]
}

model LocationUser {
  id         Int       @id @default(autoincrement())
  userId     String
  locationId Int
  startDate  DateTime  @default(now()) @db.Timestamp(6)
  endDate    DateTime? @db.Timestamp(6)
  location   Location  @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, locationId, startDate])
}

model TimeRecord {
  id         Int           @id @default(autoincrement())
  userId     String
  locationId Int
  date       DateTime      @db.Date
  clockIn    DateTime      @db.Timestamp(6)
  clockOut   DateTime?     @db.Timestamp(6)
  status     String        @default("active") @db.VarChar(50)
  note       String?
  createdAt  DateTime      @default(now()) @db.Timestamp(6)
  updatedAt  DateTime      @updatedAt @db.Timestamp(6)
  breaks     BreakRecord[]
  location   Location      @relation(fields: [locationId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([date])
}

model BreakRecord {
  id           Int        @id @default(autoincrement())
  timeRecordId Int
  startTime    DateTime   @db.Timestamp(6)
  endTime      DateTime?  @db.Timestamp(6)
  type         String     @default("lunch") @db.VarChar(50)
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt @db.Timestamp(6)
  timeRecord   TimeRecord @relation(fields: [timeRecordId], references: [id])

  @@index([timeRecordId])
}

model WorkSummary {
  id           Int      @id @default(autoincrement())
  userId       String
  locationId   Int
  date         DateTime @db.Date
  totalMinutes Int
  breakMinutes Int
  status       String   @db.VarChar(50)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
}
