generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String?
  name              String?
  role              String             @default("EMPLOYEE")
  isProfileComplete Boolean            @default(false)
  locationId        Int?
  createdAt         DateTime           @default(now()) @db.Timestamp(6)
  updatedAt         DateTime           @updatedAt @db.Timestamp(6)
  title             String             @default("Staff")
  locationUsers     LocationUser[]
  refreshTokens     RefreshToken[]
  Report            Report[]
  timeRecords       TimeRecord[]
  location          Location?          @relation(fields: [locationId], references: [id])
  verificationCodes VerificationCode[]

  @@index([locationId])
}

model Location {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(255)
  branch        String?        @db.VarChar(100)
  company       String?        @db.VarChar(255)
  address       String
  createdAt     DateTime       @default(now()) @db.Timestamp(6)
  updatedAt     DateTime       @updatedAt @db.Timestamp(6)
  placeId       String         @unique
  abn           String?
  locationUsers LocationUser[]
  Report        Report[]
  timeRecords   TimeRecord[]
  users         User[]
}

model LocationUser {
  id         Int       @id @default(autoincrement())
  userId     String
  locationId Int
  startDate  DateTime  @default(now()) @db.Timestamp(6)
  endDate    DateTime? @db.Timestamp(6)
  location   Location  @relation(fields: [locationId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, locationId, startDate])
}

model TimeRecord {
  id             Int      @id @default(autoincrement())
  userId         String
  locationId     Int
  status         String   @db.VarChar(50)
  note           String?
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  clockInTime    String?   @db.VarChar(5)
  clockOutTime   String?  @db.VarChar(5)

  // 첫 번째 break
  breakStartTime1 String?  @db.VarChar(5)
  breakEndTime1   String?  @db.VarChar(5)
  // 두 번째 break
  breakStartTime2 String?  @db.VarChar(5)
  breakEndTime2   String?  @db.VarChar(5)
  // 세 번째 break
  breakStartTime3 String?  @db.VarChar(5)
  breakEndTime3   String?  @db.VarChar(5)

  breakMinutes   Int      @default(0)
  workingHours   Float    @default(0)
  date           String   @db.VarChar(10)
  location       Location @relation(fields: [locationId], references: [id])
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([date])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String   @db.VarChar(6)
  expiresAt DateTime
  createdAt DateTime @default(now()) @db.Timestamp(6)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([email])
  @@index([expiresAt])
}

model Report {
  id         Int       @id @default(autoincrement())
  title      String
  startDate  DateTime
  endDate    DateTime
  fileName   String
  fileData   Bytes
  locationId Int?
  creatorId  String
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt @db.Timestamp(6) 
  User       User      @relation(fields: [creatorId], references: [id])
  Location   Location? @relation(fields: [locationId], references: [id])

  @@index([creatorId])
  @@index([locationId])
  @@index([startDate, endDate])
}
